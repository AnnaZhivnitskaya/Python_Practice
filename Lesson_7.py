''' # Задача №1461. Шарики
# В одной компьютерной игре игрок выставляет в линию шарики разных цветов.
# Когда образуется непрерывная цепочка из трех и более шариков одного цвета,
# она удаляется из линии.
# Все шарики при этом сдвигаются друг к другу, и ситуация может повториться.
# Напишите программу, которая по данной ситуации определяет, сколько шариков
# будет "уничтожено".
# Естественно, непрерывных цепочек из трех и более одноцветных шаров в начальный момент
# может быть не более одной.
# Входные данные
# A
# Сначала вводится количество шариков в цепочке (не более 1000) и
# цвета шариков (от 0 до 9, каждому цвету соответствует свое целое число).
# о
# Ө
# Выходные данные
# Требуется вывести количество шариков, которое будет "уничтожено".
# Примеры
# входные данные
# 5 1 3 3 3 2
# выходные данные
# 3
# 1 1 2 3 4 5 5 5 6 7 8 8 8 4 2 2 2 2 2

from itertools import groupby

res_list = [len(list(v)) for ch, v in groupby(input().split())]
print(sum([i for i in res_list if i > 2]))
'''

# У вас есть код, который вы не можете менять(так часто бывает, когда код в глубине программы 
# используется множество раз и вы не хотите ничего сломать): 
# transformation = <???> values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] 
# # или любой другой список transormed_values = list(map(transformation, values)) 
# Единственный способ вашего взаимодействия с этим кодом - посредством задания функции transformation.
#  Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать список значений, 
# а нужно получить его как есть. 
# Напишите такое лямбда-выражение transformation, чтобы transformed_values получился копией values.
values = [1, 23, 42, 'asdfg']
transformation = lambda x: x
transformed_values = list(map(transformation, values))
if values == transformed_values:
    print('ok')
else:
    print('fail')

'''Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь. Напишите функцию f ind_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета. Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники были были запущены на круговые орбиты. Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса. При решении задачи используйте списочные выражения. Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс, имеющий такую  площадь. Гарантируется, что самая далекая планета ровно одна
def find_farthest_orbit(nums_list):
    pass


orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3), (11, 11)]
print(find_farthest_orbit(orbits))

def find_farthest_orbit(nums_list):
    return max([(a[0]*a[1],a) for a in nums_list if a[0]!=a[1]])[1] # единица в кв скобках означает,
# что возвращается из кортежа (a[0]*a[1],a) возвращается элемент с индексом 1

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3), (11, 11)]
print(*find_farthest_orbit(orbits))
'''


# Напишите функцию same_by(characteristic, objects), которая проверяет,
#  все ли объекты имеют одинаковое значение некоторой характеристики, 
# и возвращают True, если это так. 
# Если значение характеристики для разных объектов отличается - то False. 
# Для пустого набора объектов, функция должна возвращать True. 
# Аргумент characteristic - это функция, которая принимает объект и вычисляет его характеристику.
def same_by(condition, nums):
    return len(set(map(condition, nums))) == 1


values = [0, 2, 10, 5]
print(same_by(lambda x: x % 2, values))

if same_by(lambda x: x % 2, values):
    print('same')
else:
    print('different')